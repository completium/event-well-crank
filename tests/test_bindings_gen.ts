/* Bindings typescript generated by archetype version: 1.2.13-rc0 */

import { MichelsonType } from '@taquito/michel-codec';
import { BigNumber } from 'bignumber.js';
import { registerEvent, WellEvent, WellEventProcessor, hex_to_data } from '../src/index';

/* Event: TestEvent */

export interface TestEvent extends WellEvent {
  ival : BigNumber,
  sval : string
}

const michelsonType_TestEvent: MichelsonType =
{  "prim": "pair",
   "args": [
     {  "prim": "string",
        "annots": [
          "%_kind"
        ]
     },
     {  "prim": "pair",
        "args": [
          {  "prim": "nat",
             "annots": [
               "%ival"
             ]
          },
          {  "prim": "string",
             "annots": [
               "%sval"
             ]
          }
        ]
     }
   ]
};

function make_TestEvent(input: string): TestEvent | undefined {
  const data = hex_to_data(michelsonType_TestEvent, input)

  if (data._kind !== 'TestEvent') {
    return undefined;
  }
  return {
ival : data.ival,
sval : data.sval }
}

export function register_TestEvent(source : string, handler : WellEventProcessor<TestEvent>) {
  registerEvent({ s: source, c: make_TestEvent, p: handler })
}
